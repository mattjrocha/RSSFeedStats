@typeparam TableItem
<!-- This is based off Ankit Sharma BlazorGrid for Blazor3.1 -->
<!--https://www.c-sharpcorner.com/article/creating-a-reusable-grid-component-for-blazor/-->
<!-- Reusing most of the UI code, its adapted for .net 5.0 MRocha -->
<table>
    <thead>
        <tr class="jsgrid-grid-header">@GridHeader</tr>
    </thead>
    <tbody>
        @foreach (var item in ItemList)
        {
            <tr class="jsgrid-row-item">@GridRow(item)</tr>
        }
    </tbody>
</table>
<div class="pagination">
    <button class="btn pagebutton btn-info" @onclick="(() => SetPagerSize(back))">&laquo;</button>

    <button class="btn pagebutton btn-secondary" @onclick="(() => NavigateToPage(prev))">Prev</button>
    @for (int i = startPage; i <= endPage; i++)
    {
        var currentPage = i;
        <button class="btn pagebutton @(currentPage==curPage?"currentpage":"")" @onclick="(() => updateList(currentPage))">
            @currentPage
        </button>
    }
    <button class="btn pagebutton btn-secondary" @onclick="(() => NavigateToPage(next))">Next</button>
    <button class="btn pagebutton btn-info" @onclick="(() => SetPagerSize(frwd))">&raquo;</button>
    <span class="pagebutton btn btn-link disabled">Page @curPage of @totalPages</span>
</div>
@functions {

    private int totalPages;
    private int curPage;
    private int pagerSize;
    private int startPage;
    private int endPage;
    private string back = "back";
    private string prev = "previous";
    private string frwd = "forward";
    private string next = "next";
    [Parameter]
    public RenderFragment GridHeader { get; set; }
    [Parameter]
    public RenderFragment<TableItem> GridRow { get; set; }
    [Parameter]
    public IEnumerable<TableItem> Items { get; set; }
    [Parameter]
    public int PageSize { get; set; }
    IEnumerable<TableItem> ItemList { get; set; }

    protected async override Task OnInitializedAsync()
    {
        pagerSize = 4;
        curPage = 1;
        ItemList = Items.Skip((curPage - 1) * PageSize).Take(PageSize);
        totalPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
        await SetPagerSize(frwd);
        await Task.Delay(1);
    }
    private async Task updateList(int currentPage)
    {
        ItemList = Items.Skip((currentPage - 1) * PageSize).Take(PageSize);
        curPage = currentPage;
        this.StateHasChanged();
        await Task.Delay(1);
    }
    private async Task SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        await Task.Delay(1);
    }
    private async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    await SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    await SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await updateList(curPage);
        await Task.Delay(1);
    }
}

<style>
    .jsgrid-grid-header {
        text-align: center;
        border-collapse: collapse;
        background: #ebebeb;
    }

    .jsgrid-row-item:hover {
        background: #9fcdf4;
    }

    th, td {
        padding: 15px;
        border: 1px solid #d1d1d1;
        text-align: center;
    }

    .pagebutton {
        margin-right: 5px;
        margin-top: 5px;
    }

    .currentpage {
        background-color: dodgerblue;
        color: white;
    }
</style>